// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id          Int       @id @default(autoincrement())
    title       String    // 文章标题
    slug        String    @unique @db.VarChar(320)
    content     String    @db.MediumText // 文章内容
    keywords    String?   @db.VarChar(800) // 文章关键词
    description String?   @db.VarChar(800) // 文章描述
    imgUrl      String?   // 文章封面图片 URL
    published   Boolean   @default(false) // 是否发布
    createdAt   DateTime  @default(now())
    updatedAt   DateTime?  @updatedAt

    views       Int       @default(0) // 浏览量
    recommendedTag Tag?    @relation("RecommendedPosts", fields: [recommendedTagName], references: [name]) // 推荐标签
    recommendedTagName String? // 推荐标签名称

    // 关联作者（User）
    author      User?      @relation(fields: [authorId], references: [id])
    authorId    String?

    // 关联分类（一篇文章一个分类）
    category    Category  @relation(fields: [categoryId], references: [id])
    categoryId  Int

    // 关联标签（一篇文章多个标签）
    tags        PostTag[]

    @@index([recommendedTagName])
    @@index([title])
    @@index([categoryId])
    @@index([authorId])
}

// 新增分类表
model Category {
    id          Int      @id @default(autoincrement())
    name        String   @unique
    slug        String   @unique
    description String?   @db.VarChar(800) // 文章描述@db.VarChar(320)
    keywords    String?   @db.VarChar(800) // 关键词
    parentId    Int?
    parent      Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
    children    Category[] @relation("CategoryToCategory")
    posts       Post[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime? @updatedAt

    @@index([parentId])
}

// 新增标签表
model Tag {
    id          Int       @id @default(autoincrement())
    name        String    @unique
    keywords    String?   @db.VarChar(800) // 关键词
    description String?   @db.VarChar(800) // 文章描述
    slug        String    @unique
    posts       PostTag[]
    recommendedPosts Post[] @relation("RecommendedPosts") // 被推荐的文章

    createdAt   DateTime  @default(now())
    updatedAt   DateTime?  @updatedAt
}

// 文章-标签关联表（多对多关系）
model PostTag {
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    Int
    tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
    tagId     Int
    createdAt DateTime @default(now())

    @@id([postId, tagId])
    @@index([tagId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
